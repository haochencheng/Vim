" 映射jk为退出<ESC>键
inoremap jk <ESC>
"沙箱主题
colorscheme desert
" 基础设置

set scrolloff=6                 " 在上下移动光标时，光标的上方或下方至少会保留显示的行数     
set ai							"自动缩进
set guifont=Monaco:h15          " 字体 && 字号
syntax on                       " 打开语法高亮
set number                      " 显示行号
set autoindent                  "  " autoindent (简单的与上一行保持一致)
set smartindent                 " smartindent (智能模式)、
set tabstop=4                   " 设置 tab 键的宽度
set shiftwidth=4                " 换行时行间交错使用4个空格
set backspace=indent,eol,start  " indent：如果用了 set indent, set ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项，否则不响应。
set backspace=2                 " eol：如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。
                                " start：要想删除此次插入前的输入，需设置这个。
set smarttab                    " 每次按 backspace 时删除4个空格
set incsearch                   " 增量式搜索(遍搜索遍显示内容)
set hlsearch                    " 高亮搜索
filetype on                     " 打开文件类型检测功能
filetype plugin on              " 允许加载文件类型插件
filetype indent on              " 允许为不同类型的文件定义不同的缩进格式
set showmatch                   " 显示括号配对情况
set foldenable                  " 开启代码折叠
set foldmethod=syntax           " 自动语法折叠
set nobackup                    " 禁止生成备份
set noswapfile                  " 不产生 swp 文件
set nowritebackup 				"不生成～后缀的临时文件
set mouse=a                     " 启用鼠标
set nowrap                      " 设置不自动折行
set cursorline                  " 突出显示当前行
set clipboard=unnamed           " 与 windows 共享剪贴板
set cmdheight=1                 " 命令行（在状态行下）的高度，默认为1
set laststatus=2                " 开启状态栏信息

" 设置窗口
if has("gui_running")
    " au GUIEnter * simalt ~x   " 窗口启动时自动最大化
    winpos 570 525                " 指定窗口出现的位置，坐标原点在屏幕左上角
    set lines=40 columns=100    " 指定窗口大小，lines 为高度，columns 为宽度
    set guioptions+=c           " 使用字符提示框
    set guioptions-=m           " 隐藏菜单栏
    set guioptions-=T           " 隐藏工具栏
    set guioptions=L            " 隐藏左侧滚动条
    set guioptions=r            " 隐藏右侧滚动条
    set guioptions-=b           " 隐藏底部滚动条
    set showtabline=0           " 隐藏 Tab 栏
endif

" 设置编码!
set encoding=utf-8
set fileencoding=utf-8                      " 当前文件编辑时使用的文件编码
set fileencodings=utf-8,gbk,cp936,latin-1   " gvim 打开文件是支持的编码
language messages zh_CN.utf-8               " 解决 consle 输出乱码
set ambiwidth=double                        " 防止特殊符号无法显示
set helplang=cn                             " 中文帮助

"下面参考博客 http://oldj.net/article/vim-parenthesis/
" 插入匹配括号 
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap { {<ENTER><TAB><ENTER>}<UP><ESC>$a
inoremap < <><LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>

" 按退格键时判断当前光标前一个字符，如果是左括号，则删除对应的右括号以及括号中间的内容
function! RemovePairs()
	let l:line = getline(".")
	let l:previous_char = l:line[col(".")-1] " 取得当前光标前一个字符
 
	if index(["(", "[", "{","<"], l:previous_char) != -1	
		let l:original_pos = getpos(".")
		execute "normal %"
		let l:new_pos = getpos(".")
 
		" 如果没有匹配的右括号
		if l:original_pos == l:new_pos
			execute "normal! a\<BS>"
			return
		end
 
		let l:line2 = getline(".")
		if len(l:line2) == col(".")
			" 如果右括号是当前行最后一个字符
			execute "normal! v%xa"
		else
			" 如果右括号不是当前行最后一个字符
			execute "normal! v%xi"
		end
 
	else
		execute "normal! a\<BS>"
	end
endfunction
" 用退格键删除一个左括号时同时删除对应的右括号
inoremap <BS> <ESC>:call RemovePairs()<CR>a
" 输入一个字符时，如果下一个字符也是括号，则删除它，避免出现重复字符
function! RemoveNextDoubleChar(char)
	let l:line = getline(".")
	let l:next_char = l:line[col(".")] " 取得当前光标后一个字符
 
	if a:char == l:next_char
		execute "normal! l"
	else
		execute "normal! i" . a:char . ""
	end
endfunction
inoremap ) <ESC>:call RemoveNextDoubleChar(')')<CR>a
inoremap ] <ESC>:call RemoveNextDoubleChar(']')<CR>a
inoremap } <ESC>:call RemoveNextDoubleChar('}')<CR>a



set completeopt=preview,menu  	"代码补全!
filetype plugin on   	"允许插件 
set nocompatible 		" 不要使用vi的键盘模式，而是vim自己的
set foldlevel=3
set foldenable     		" 开始折叠
set confirm				" 在处理未保存或只读文件的时候，弹出确认
set noeb				" 去掉输入错误的提示声音
set gdefault			"行内替换
set wildmenu 			" 增强模式中的命令行自动完成操作


" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" 关闭方向键, 强迫自己用 hjkl 接受制裁吧！ 
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

"多窗口编辑时, 临时放大某个窗口, 编辑完再切回原来的布局
" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Leader>z :ZoomToggle<CR>

" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :

"H和L跳转到行首行末, 实在不想按0和$, 太远
" Go to home and end using capitalized directions
noremap H ^
noremap L $


" 搜索相关
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
""map <space> /
" 进入搜索Use sane regexes"
"nnoremap / /\v
"vnoremap / /\v

" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" 调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

"复制动作的变更, Y, 复制到行末
" y$ -> Y Make Y behave like other capitals
map Y y$

" 复制选中区到系统剪切板中
vnoremap <leader>y "+y

" select all
map <Leader>sa ggVG"

" select block
nnoremap <leader>v V`}

" remap U to <C-r> for easier redo
nnoremap U <C-r>

" 保存python文件时删除多余空格
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

"粘贴时不置换“剪贴板”
xnoremap p pgvy

"补全css，html
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
